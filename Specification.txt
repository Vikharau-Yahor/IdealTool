STRUCTURE:

Scripts\Managed - contains custom unmanaged scripts with pure PS1. Use 'urun' command to execute
Scripts\UnManaged - contains custom scripts with commands supported by this tool. Use 'run' command to execute
Main.ps1 - main startup module.

***********************************************************
CONFIG GENERATION
- Scan for all projects in a folder and collect: git repos, type of project (.net, other), type of .net project (exe, dll), .sln path, main proj path and etc -- save all into the config
	1) git-repos.config
	2) net-projects.config
	3) active-entities.config
	4) tools.config (VS, Rider, PowerShell and etc)
Note: Every project must have key/alias (user input)
Note: Collect tools info (VS, Rider, PS, VSCode, [optional]Sublime)

active-entities.config
<Entity type=dotNet subtype=web alias=io id=IntelliWeb.csproj >

git-repos.config:
<GitRepo name="" path="" id="git-IntelligentOffice" alias="g-io"> // in git commands 'io' alias can be used; g-io it's global alias

net-projects.config:
<Sln isInGit="true/false" path="" name="">
<NetProject //.net consoles, wpf, asp, win-services and etc
	gitRef="IntelligentOffice.git" 
	projPath="\src\..sln relative path" 
	name="csproj-IntellifentOffice"
	alias="n-uio" // in .net commands uio alias can be used
	id="IntellifentOffice.csproj"
	type="webapp"
	custom="false" // Is this project generated by tool or added by user
<\Sln>

***********************************************************
COMMANDS:
General rules
- <commandName> <param, param2;param3...> - template for the command. 
- command and params MUST be diveded by 1 white space
- params separator: ',' and ' ;' and ' ' (empty params are exlcuded)

Command list:
- urun <command> - run unmanaged ps1-script from Scripts\Managed 
	where <command> is name of the script (w/o extension)
- run <command> - run unmanaged ps1-script from Scripts\Managed where <command> is name of the script (w/o extension) 
- scan <path> - scan for git-repos/net projects and fill in or refresh necessary configs
- openvs <net-proj-alias> - open net-project solution in VS studio 
- openr <net-proj-alias> - open net-project solution in rider
- run-exe <net-proj-alias> - run exe of the .net proj by his alias
- set-alias <alias> <entity-id>? - set alias (<alias>) for project or git-repo or other entity (<entity-id>). Or start Setting alias process for all active entities which have no alias

***********************************************************
PROBLEMS:
* [Resolved] Store different types of project [for certain type of project -- its own config, but all active entities must be in 'active-entities.config']
* [Resolved] Store multiple projects for net solution with several alive (eg. io repo: server.core, web, server.valuations, tests) [net-projects.config, see template above]
